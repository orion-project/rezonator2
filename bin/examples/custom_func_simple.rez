{
    "builtin_params": {
        "lambda": {
            "unit": "nm",
            "value": 1040
        }
    },
    "custom_params": {
        "P1": {
            "descr": "",
            "dim": "linear",
            "error": "",
            "expr": "",
            "unit": "mm",
            "value": 10
        }
    },
    "elements": [
        {
            "is_disabled": false,
            "label": "M_out",
            "layout_draw_alt": false,
            "layout_show_label": true,
            "params": {
            },
            "title": "output mirror",
            "type": "ElemFlatMirror"
        },
        {
            "is_disabled": false,
            "label": "L",
            "layout_draw_alt": false,
            "layout_show_label": true,
            "params": {
                "L": {
                    "error": "",
                    "expr": "",
                    "unit": "mm",
                    "value": 400
                },
                "n": {
                    "error": "",
                    "expr": "",
                    "unit": "none",
                    "value": 1
                }
            },
            "title": "folding range",
            "type": "ElemEmptyRange"
        },
        {
            "is_disabled": false,
            "label": "M_foc",
            "layout_draw_alt": false,
            "layout_show_label": true,
            "params": {
                "Alpha": {
                    "error": "",
                    "expr": "",
                    "unit": "deg",
                    "value": 10.000000000000004
                },
                "R": {
                    "error": "",
                    "expr": "",
                    "unit": "mm",
                    "value": 50
                }
            },
            "title": "dichroic mirror",
            "type": "ElemCurveMirror"
        },
        {
            "is_disabled": false,
            "label": "L_foc",
            "layout_draw_alt": false,
            "layout_show_label": true,
            "params": {
                "L": {
                    "error": "",
                    "expr": "",
                    "unit": "mm",
                    "value": 24.6
                },
                "n": {
                    "error": "",
                    "expr": "",
                    "unit": "none",
                    "value": 1
                }
            },
            "title": "focusing range",
            "type": "ElemEmptyRange"
        },
        {
            "is_disabled": false,
            "label": "Cr",
            "layout_draw_alt": false,
            "layout_show_label": true,
            "params": {
                "L": {
                    "error": "",
                    "expr": "",
                    "unit": "mm",
                    "value": 1.6
                },
                "n": {
                    "error": "",
                    "expr": "",
                    "unit": "none",
                    "value": 2
                }
            },
            "title": "brewster crystal",
            "type": "ElemBrewsterPlate"
        },
        {
            "is_disabled": false,
            "label": "L_cr",
            "layout_draw_alt": false,
            "layout_show_label": true,
            "params": {
                "L": {
                    "error": "",
                    "expr": "",
                    "unit": "mm",
                    "value": 29.9
                },
                "n": {
                    "error": "",
                    "expr": "",
                    "unit": "none",
                    "value": 1
                }
            },
            "title": "",
            "type": "ElemEmptyRange"
        },
        {
            "is_disabled": false,
            "label": "M_back",
            "layout_draw_alt": false,
            "layout_show_label": true,
            "params": {
                "Alpha": {
                    "error": "",
                    "expr": "",
                    "unit": "deg",
                    "value": 0
                },
                "R": {
                    "error": "",
                    "expr": "",
                    "unit": "mm",
                    "value": 30
                }
            },
            "title": "output range",
            "type": "ElemCurveMirror"
        }
    ],
    "formulas": [
    ],
    "notes": "",
    "param_links": [
    ],
    "pumps": [
    ],
    "schema_version": "2.1",
    "title": "",
    "trip_type": "SW",
    "windows": [
        {
            "code": "'''Various demos'''\n\nimport rezonator as Z\nimport schema\nimport sys\n\ndef calculate():\n  for p in sys.path:\n    Z.print('Module path:', p)\n  \n  # Global constants\n  Z.print('')\n  Z.print(f'PI = {Z.PI}, C = {Z.C}m/s')\n\n  # Schema parameteres\n  Z.print('')\n  wl = schema.wavelength()\n  p1 = schema.param(\"P1\")\n  Z.print(f'Wavelen = {wl*1e9}nm, P1 = {p1}')\n  \n  # Schema element\n  Z.print('')\n  e = show_elem(schema.elem('Cr')) # can get element by label\n  e = show_elem(schema.elem(2)) # can get element by number\n\ndef show_elem(e):\n  Z.print('Element ', e.label, ':', spaced=False)\n  Z.print('  length:', e.length, 'm')\n  Z.print('  optical:', e.optical_length, 'm')\n  Z.print('  axial:', e.axis_length, 'm')\n  Z.print('  ior:', e.ior)\n",
            "title": "Various demos",
            "type": "FuncEditor"
        },
        {
            "code": "'''Repetition rate'''\n\nimport rezonator as Z\nimport schema\n\ndef calculate():\n  total_len = 0\n\n  # schema returns elements as they are numbered in the table (1-based)\n  # but python's range() function returns 0-based indexes, so +1 here\n  for i in range(1, schema.elem_count()+1):\n    elem = schema.elem(i)\n    elem_len = elem.optical_length\n    if not elem_len:\n      # Is not a range\n      continue\n    Z.print('Elem', i, ':', elem.label, '=', Z.format(elem_len), 'm')\n    total_len += elem_len\n\n  Z.print('Total length: ', Z.format(total_len), 'm', spaced=False)\n\n  # Effective length is doubled in standing-wave rezonatos\n  if schema.is_sw():\n    total_len *= 2\n\n  rep_rate = Z.C / total_len\n  Z.print('Repetition rate: ', Z.format(rep_rate/1e6), 'MHz', spaced=False)\n",
            "title": "Repetition rate",
            "type": "FuncEditor"
        }
    ]
}
